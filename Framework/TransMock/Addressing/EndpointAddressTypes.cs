
/***************************************
//   Copyright 2019 - Svetoslav Vasilev

//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
*****************************************/

/// -----------------------------------------------------------------------------------------------------------
/// Module      :  EndpointAddressTypes.cs
/// Description :  This file contains the classes that describe endpoint adresses in regards to the corresponding messaging pattern.
/// -----------------------------------------------------------------------------------------------------------
/// 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TransMock.Addressing
{
    /// <summary>
    /// Base abstract class for all endpoint addresses which defines the common behaviour.
    /// All the classes that derived trom this class are used in the <see cref="EndpointsMock{TAddresses}"/> class' 
    /// Setup methods in conjunction with the concreate TAddresses implementation to scope setting up only allowed
    /// addresses for the given messaging pattern. The concrete TAddresses class is an instance of a class MockAddresses
    /// class generated by the mockfier.
    /// For instance in the case of SetupReceive method there can only be specivied properties from the MockAddresses* class
    /// that are of type ReceiveEndpointAddress. This way the programing model is becoming in a way strongly typed in terms of the 
    /// address definitions for the mocked endpoints and hence any errors that were previously encountered based on wrongly pointing
    /// to incompatible mocked endpoint are now history.
    /// </summary>    
    public abstract class EndpointAddress
    {
        /// <summary>
        /// Creates an instance of the <see cref="EndpointAddress"/> through inheritance only
        /// </summary>
        protected EndpointAddress()
        {

        }

        public string Value { get; protected set; }
       
    }

    /// <summary>
    /// Describes the address of a 1-way receive endpoint
    /// </summary>
    public class OneWayReceiveAddress : EndpointAddress
    {
        public OneWayReceiveAddress(string address)
        {
            this.Value = address;
        }
    }

    /// <summary>
    /// Describes the address of a 1-way send endpoint
    /// </summary>
    public class OneWaySendAddress : EndpointAddress
    {
        public OneWaySendAddress(string address)
        {
            this.Value = address;
        }
    }

    /// <summary>
    /// Describes the address of a 1-way receive endpoint
    /// </summary>
    public class TwoWayReceiveAddress : EndpointAddress
    {
        public TwoWayReceiveAddress(string address)
        {
            this.Value = address;
        }

    }

    /// <summary>
    /// Type for enforcing a 2 way send address behavior
    /// </summary>
    public class TwoWaySendAddress : EndpointAddress
    {
        public TwoWaySendAddress(string address)
        {
            this.Value = address;
        }
    }
}
